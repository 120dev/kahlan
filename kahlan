#!/usr/bin/env php
<?php
$composer = include __DIR__ . '/vendor/autoload.php';
chdir(__DIR__);

use box\Box;
use dir\Dir;
use kahlan\Suite;
use kahlan\Cleaner;
use kahlan\jit\Interceptor;
use kahlan\jit\Patcher;
use kahlan\jit\patcher\Substitute;
use kahlan\jit\patcher\Watcher;
use kahlan\jit\patcher\Monkey;
use kahlan\Reporter;
use kahlan\reporter\ProgressBar;
use kahlan\reporter\Dot;
use kahlan\reporter\Coverage;
use kahlan\reporter\coverage\driver\Xdebug;
use kahlan\reporter\coverage\exporter\Scrutinizer;
use kahlan\reporter\coverage\exporter\Coveralls;

// Manage options
$options = getopt('', [
	'spec::',
	'src::',
	'include::',
	'exclude::',
	'coverage::',
	'coverage-scrutinizer::',
	'coverage-coveralls::'
]);

$options += [
	'src' => 'src',
	'spec' => 'spec',
	'include' => [],
	'exclude' => [],
	'coverage-scrutinizer' => null,
	'coverage-coveralls' => null
];

// Inititialize code patchers
$patcher = new Patcher();
$patcher->add('substitute', new Substitute(['namespaces' => ['spec\\']]));
$patcher->add('watcher', new Watcher());
$patcher->add('monkey', new Monkey());

// Patch the autoloader
Interceptor::patch([
	'loader' => [$composer, 'loadClass'],
	'patcher' => $patcher,
	'blacklist' => ['kahlan\jit\\', 'kahlan\plugin\\', 'kahlan\analysis\\', 'kahlan\util\\']
]);

// Load specs files
$files = Dir::scan([
	'path' => $options['spec'],
	'include' => '*Spec.php',
	'type' => 'file'
]);
foreach($files as $file) {
	require $file;
}

// Inititialize the reporters
$reporter = new Reporter();
$reporter->add('console', new Dot()); // Dot style report

if (isset($options['coverage'])) {
	$coverage = new Coverage([
		'verbosity' => $options['coverage'], 'driver' => new Xdebug(), 'path' => $options['src']
	]);
	$reporter->add('coverage', $coverage); // Coverage report
}

// Run the suite
$suite = Box::get('kahlan.suite');
$result = $suite->run([
	'reporter' => $reporter,
	'autoclear' => ['kahlan\plugin\Monkey', 'kahlan\plugin\Call', 'kahlan\plugin\Stub']
]);

// Export the coverage result
if (isset($options['coverage'])) {
	if ($options['coverage-scrutinizer']) {
		Scrutinizer::write(['coverage' => $coverage, 'file' => $options['coverage-scrutinizer']]);
	}
	if ($options['coverage-coveralls']) {
		Coveralls::write([
			'coverage' => $coverage,
			'file' => $options['coverage-coveralls'],
			'service_name' => 'travis-ci',
			'service_job_id' => getenv('TRAVIS_JOB_ID') ?: null
		]);
	}
}

// Exit with the correct status code
$suite->stop($result);

?>