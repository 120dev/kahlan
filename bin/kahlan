#!/usr/bin/env php
<?php

// Composer checks
if (file_exists($file = __DIR__ . '/../vendor/autoload.php')) {
	$composer = include $file;
	chdir(__DIR__ . '/..');
} elseif (file_exists($file = __DIR__ . '/../../../autoload.php')) {
	$composer = include $file;
	chdir(__DIR__ . '/../../../..');
}

if (!isset($composer)) {
	echo "\033[1;31mYou need to set up the project dependencies using the following commands: \033[0m" . PHP_EOL;
	echo 'curl -s http://getcomposer.org/installer | php' . PHP_EOL;
	echo 'php composer.phar install' . PHP_EOL;
	exit(1);
}

use box\Box;
use dir\Dir;
use kahlan\Suite;
use kahlan\Cleaner;
use kahlan\jit\Interceptor;
use kahlan\jit\Patcher;
use kahlan\jit\patcher\Substitute;
use kahlan\jit\patcher\Watcher;
use kahlan\jit\patcher\Monkey;
use kahlan\Reporter;
use kahlan\reporter\Dot;
use kahlan\reporter\Coverage;
use kahlan\reporter\coverage\driver\Xdebug;
use kahlan\reporter\coverage\exporter\Scrutinizer;

// Manage options
$options = getopt('', ['spec::', 'src::', 'coverage::', 'coverage-scrutinizer::']);
$options += [
	'src' => 'src',
	'spec' => 'spec',
	'coverage-scrutinizer' => null
];

// Inititialize code patchers
$patcher = new Patcher();
$patcher->add('substitute', new Substitute(['namespaces' => ['spec\\']]));
$patcher->add('watcher', new Watcher());
$patcher->add('monkey', new Monkey());

// Patch the autoloader
Interceptor::patch([
	'loader' => [$composer, 'loadClass'],
	'patcher' => $patcher
]);

// Load specs files
$files = Dir::scan([
	'path' => $options['spec'],
	'include' => '*Spec.php',
	'type' => 'file'
]);
foreach($files as $file) {
	require $file;
}

// Inititialize the reporters
$reporter = new Reporter();
$reporter->add('console', new Dot()); // Dot style report

if(isset($options['coverage'])) {
	$coverage = new Coverage([
		'verbosity' => $options['coverage'], 'driver' => new Xdebug(), 'path' => $options['src']
	]);
	$reporter->add('coverage', $coverage); // Coverage report
}

// Run the suite
$suite = Box::get('kahlan.suite');
$result = $suite->run([
	'reporter' => $reporter,
	'autoclear' => [  // Call ::clean() on theses classes after each `it()`
		'kahlan\plugin\Monkey',
		'kahlan\plugin\Call',
		'kahlan\plugin\Stub'
	]
]);

// Export the coverage result
if (isset($options['coverage']) && $options['coverage-scrutinizer']) {
	Scrutinizer::write(['coverage' => $coverage, 'file' => $options['coverage-scrutinizer']]);
}

// Exit with the correct status code
$suite->stop($result);

?>