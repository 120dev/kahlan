#1     [          open           ] #1 > #1         |<?php
#2     [           doc           ] #2 > #4         |/**
#3     [           doc           ] #3 > #4         | * Some comments
#4     [           doc           ] #4 > #4         | */
#5     [                         ] #5 > #5         |
#6     [           ns            ] #6 > #159       |namespace spec\fixture\analysis;
#7     [                         ] #7 > #7         |
#8     [            u            ] #8 > #8         |use kahlan\A;
#9     [            u            ] #9 > #9         |use kahlan\B, kahlan\C;
#10    [            u            ] #10 > #10       |use kahlan\E as F;
#11    [            u            ] #11 > #11       |use stdObj;
#12    [                         ] #12 > #12       |
#13    [           fct           ] #13 > #17       |function slice($data, $keys) {
#14    [            c            ] #14 > #14       |    $removed = array_intersect_key($data, array_fill_keys((array) $keys, true));
#15    [            c            ] #15 > #15       |    $data = array_diff_key($data, $removed);
#16    [            c            ] #16 > #16       |    return array($data, $removed);
#17    [           fct           ] #17 > #17       |}
#18    [                         ] #18 > #18       |
#19    [          class          ] #19 > #121      |class Sample extends \kahlan\fixture\Parent {
#20    [                         ] #20 > #20       |
#21    [          attr           ] #21 > #21       |    protected static $_classes = [
#22    [      str,attr,str       ] #22 > #22       |        'matcher' => 'kahlan\Matcher'
#23    [          attr           ] #23 > #23       |    ];
#24    [                         ] #24 > #24       |
#25    [      attr,str,attr      ] #25 > #25       |    protected $_matcher = '';
#26    [                         ] #26 > #26       |
#27    [           doc           ] #27 > #27       |    // Using a tab
#28    [          attr           ] #28 > #28       |    protected    $_public = true;
#29    [                         ] #29 > #29       |
#30    [          attr           ] #30 > #30       |    protected $_variable = true;
#31    [                         ] #31 > #31       |
#32    [           fct           ] #32 > #34       |    public function bracketInString() {
#33    [          str,c          ] #33 > #33       |        "/^({$pattern})/";
#34    [           fct           ] #34 > #34       |    }
#35    [                         ] #35 > #35       |
#36    [           fct           ] #36 > #37       |    public function method1($a, $b = array(), $c = [], $d = 0, $f = 'hello') {
#37    [           fct           ] #37 > #37       |    }
#38    [                         ] #38 > #38       |
#39    [           fct           ] #39 > #47       |    public function method2(
#40    [           fct           ] #40 > #47       |        $a,
#41    [           fct           ] #41 > #47       |        $b = array(),
#42    [           fct           ] #42 > #47       |        $c = [],
#43    [           fct           ] #43 > #47       |        $d = 0,
#44    [           fct           ] #44 > #47       |        $f = 'hello')
#45    [           fct           ] #45 > #47       |    {
#46    [            c            ] #46 > #46       |        return rand($a * ($d + 1));
#47    [           fct           ] #47 > #47       |    }
#48    [                         ] #48 > #48       |
#49    [           fct           ] #49 > #49       |    abstract public function abstractMethod();
#50    [                         ] #50 > #50       |
#51    [           fct           ] #51 > #51       |    final public function finalMethod() {}
#52    [                         ] #52 > #52       |
#53    [           fct           ] #53 > #57       |    public function inlineComment() {
#54    [                         ] #54 > #54       |
#55    [          c,doc          ] #55 > #55       |        $a = 3; //comment
#56    [                         ] #56 > #56       |
#57    [         fct,doc         ] #57 > #57       |    } // end function
#58    [                         ] #58 > #58       |
#59    [           fct           ] #59 > #63       |    public function weirdSyntax() {
#60    [                         ] #60 > #60       |
#61    [            c            ] #61 > #61       |        foreach ($variable as $key => $value) {}
#62    [                         ] #62 > #62       |
#63    [          fct,c          ] #63 > #63       |    $i++;}
#64    [                         ] #64 > #64       |
#65    [           fct           ] #65 > #86       |    public function phpArray() {
#66    [                         ] #66 > #66       |
#67    [         c,str,c         ] #67 > #67       |        $array = array("hello");
#68    [                         ] #68 > #68       |
#69    [            c            ] #69 > #72       |        $array = array
#70    [            c            ] #70 > #72       |        (
#71    [           str           ] #71 > #71       |            "hello"
#72    [            c            ] #72 > #72       |        );
#73    [                         ] #73 > #73       |
#74    [            c            ] #74 > #78       |        $array = array(
#75    [          str,c          ] #75 > #75       |            "hello",
#76    [          str,c          ] #76 > #76       |            "world",
#77    [          str,c          ] #77 > #78       |            "world!",
#78    [            c            ] #78 > #78       |        );
#79    [                         ] #79 > #79       |
#80    [            c            ] #80 > #84       |        $array = [
#81    [          str,c          ] #81 > #81       |            "hello",
#82    [          str,c          ] #82 > #82       |            "world",
#83    [          str,c          ] #83 > #84       |            "world!",
#84    [            c            ] #84 > #84       |        ];
#85    [                         ] #85 > #85       |
#86    [           fct           ] #86 > #86       |    }
#87    [                         ] #87 > #87       |
#88    [           fct           ] #88 > #96       |    public function multilineConditions() {
#89    [                         ] #89 > #89       |
#90    [            c            ] #90 > #94       |        return ($a && (
#91    [            c            ] #91 > #94       |            $b
#92    [            c            ] #92 > #94       |            ||
#93    [            c            ] #93 > #94       |            $c
#94    [            c            ] #94 > #94       |        ));
#95    [                         ] #95 > #95       |
#96    [           fct           ] #96 > #96       |    }
#97    [                         ] #97 > #97       |
#98    [           fct           ] #98 > #108      |    public function codeEndAfterSemicolonAndBraces() {
#99    [                         ] #99 > #99       |
#100   [         c,str,c         ] #100 > #101     |        if (!$options['file'])
#101   [            c            ] #101 > #101     |        {
#102   [                         ] #102 > #102     |
#103   [         c,str,c         ] #103 > #103     |            throw new RuntimeException("Missing file name");
#104   [                         ] #104 > #104     |
#105   [                         ] #105 > #105     |        }
#106   [                         ] #106 > #106     |
#107   [         c,str,c         ] #107 > #107     |        return file_put_contents($options['file'], static::export($options));
#108   [           fct           ] #108 > #108     |    }
#109   [                         ] #109 > #109     |
#110   [           fct           ] #110 > #119     |    public function funkySyntax()
#111   [           fct           ] #111 > #119     |    {
#112   [   c,str,c,str,c,str,c   ] #112 > #112     |        $this->{"_{$key}"} = "Hello" + $this->{"_{$key}"};
#113   [                         ] #113 > #113     |
#114   [            c            ] #114 > #114     |        $this->{
#115   [           str           ] #115 > #115     |            "_{$key}"
#116   [         c,str,c         ] #116 > #116     |        } = "Hello" + $this->{
#117   [           str           ] #117 > #117     |            "_{$key}"
#118   [            c            ] #118 > #118     |        };
#119   [           fct           ] #119 > #119     |    }
#120   [                         ] #120 > #120     |
#121   [          class          ] #121 > #121     |}
#122   [                         ] #122 > #122     |
#123   [          class          ] #123 > #126     |class
#124   [          class          ] #124 > #126     |    Sample2
#125   [          class          ] #125 > #126     |    extends Sample2 {
#126   [          class          ] #126 > #126     |}
#127   [                         ] #127 > #127     |
#128   [        interface        ] #128 > #132     |interface Template1
#129   [        interface        ] #129 > #132     |{
#130   [           fct           ] #130 > #130     |    public function setVariable($name, $var);
#131   [           fct           ] #131 > #131     |    public function getHtml($template);
#132   [        interface        ] #132 > #132     |}
#133   [                         ] #133 > #133     |
#134   [          trait          ] #134 > #141     |trait Template2 {
#135   [           fct           ] #135 > #137     |    public function setVariable($name, $var) {
#136   [                         ] #136 > #136     |
#137   [           fct           ] #137 > #137     |    }
#138   [           fct           ] #138 > #140     |    public function getHtml($template) {
#139   [                         ] #139 > #139     |
#140   [           fct           ] #140 > #140     |    }
#141   [          trait          ] #141 > #141     |}
#142   [                         ] #142 > #142     |
#143   [          class          ] #143 > #144     |class Dir extends \FilterIterator{
#144   [          class          ] #144 > #144     |}
#145   [                         ] #145 > #145     |
#146   [           doc           ] #146 > #146     |//No scope
#147   [          c,c,c          ] #147 > #147     |for($i = 0; $i <= 10; $i++) {
#148   [            c            ] #148 > #148     |    $rand = rand();
#149   [                         ] #149 > #149     |}
#150   [                         ] #150 > #150     |
#151   [          close          ] #151 > #151     |?>
#152   [                         ] #152 > #152     |
#153   [            p            ] #153 > #153     |<i> Hello World </i>
#154   [                         ] #154 > #154     |
#155   [          open           ] #155 > #155     |<?php
#156   [           doc           ] #156 > #158     |/**
#157   [           doc           ] #157 > #158     | * Some comments2
#158   [           doc           ] #158 > #158     | */
#159   [           ns            ] #159 > #159     |
#160   [           ns            ] #160 > #169     |namespace kahlan\spec\fixture\parser;
#161   [                         ] #161 > #161     |
#162   [          class          ] #162 > #166     |class Sample3 extends Sample2 {
#163   [           fct           ] #163 > #165     |    public function myMethod() {
#164   [         c,str,c         ] #164 > #164     |        return 'Hello World';
#165   [           fct           ] #165 > #165     |    }
#166   [          class          ] #166 > #166     |}
#167   [                         ] #167 > #167     |
#168   [          close          ] #168 > #168     |?>
#169   [         ns,open         ] #169 > #169     |<?php
#170   [           ns            ] #170 > #175     |namespace kahlan\spec\fixture\whatever;
#171   [                         ] #171 > #171     |
#172   [          class          ] #172 > #175     |class NoPhpEndTag
#173   [          class          ] #173 > #175     |{
#174   [                         ] #174 > #174     |
#175   [        class,ns         ] #175 > #175     |}
