#1     [          open           ] #1 > #1         |<?php
#2     [           doc           ] #2 > #4         |/**
#3     [           doc           ] #3 > #4         | * Some comments
#4     [           doc           ] #4 > #4         | */
#5     [                         ] #5 > #5         |
#6     [           ns            ] #6 > #142       |namespace spec\fixture\analysis;
#7     [                         ] #7 > #7         |
#8     [            c            ] #8 > #11        |use kahlan\A;
#9     [            c            ] #9 > #11        |use kahlan\B, kahlan\C;
#10    [            c            ] #10 > #11       |use kahlan\E as F;
#11    [            c            ] #11 > #11       |use stdObj;
#12    [                         ] #12 > #12       |
#13    [           fct           ] #13 > #17       |function slice($data, $keys) {
#14    [            c            ] #14 > #14       |    $removed = array_intersect_key($data, array_fill_keys((array) $keys, true));
#15    [            c            ] #15 > #15       |    $data = array_diff_key($data, $removed);
#16    [            c            ] #16 > #16       |    return array($data, $removed);
#17    [           fct           ] #17 > #17       |}
#18    [                         ] #18 > #18       |
#19    [          class          ] #19 > #104      |class Sample extends \kahlan\fixture\Parent {
#20    [                         ] #20 > #20       |
#21    [           doc           ] #21 > #21       |    // Using a tab
#22    [          attr           ] #22 > #22       |    protected    $_public = true;
#23    [                         ] #23 > #23       |
#24    [          attr           ] #24 > #24       |    protected $_variable = true;
#25    [                         ] #25 > #25       |
#26    [           fct           ] #26 > #28       |    public function bracketInString() {
#27    [          str,c          ] #27 > #27       |        "/^({$pattern})/";
#28    [           fct           ] #28 > #28       |    }
#29    [                         ] #29 > #29       |
#30    [           fct           ] #30 > #31       |    public function method1($a, $b = array(), $c = [], $d = 0, $f = 'hello') {
#31    [           fct           ] #31 > #31       |    }
#32    [                         ] #32 > #32       |
#33    [           fct           ] #33 > #41       |    public function method2(
#34    [           fct           ] #34 > #41       |        $a,
#35    [           fct           ] #35 > #41       |        $b = array(),
#36    [           fct           ] #36 > #41       |        $c = [],
#37    [           fct           ] #37 > #41       |        $d = 0,
#38    [           fct           ] #38 > #41       |        $f = 'hello')
#39    [           fct           ] #39 > #41       |    {
#40    [            c            ] #40 > #40       |        return rand($a * ($d + 1));
#41    [           fct           ] #41 > #41       |    }
#42    [                         ] #42 > #42       |
#43    [           fct           ] #43 > #43       |    abstract public function abstractMethod();
#44    [                         ] #44 > #44       |
#45    [           fct           ] #45 > #45       |    final public function finalMethod() {}
#46    [                         ] #46 > #46       |
#47    [           fct           ] #47 > #51       |    public function inlineComment() {
#48    [                         ] #48 > #48       |
#49    [         c,c,doc         ] #49 > #49       |        $a = 3; //comment
#50    [                         ] #50 > #50       |
#51    [      fct,attr,doc       ] #51 > #51       |    } // end function
#52    [                         ] #52 > #52       |
#53    [           fct           ] #53 > #57       |    public function weirdSyntax() {
#54    [                         ] #54 > #54       |
#55    [            c            ] #55 > #55       |        foreach ($variable as $key => $value) {}
#56    [                         ] #56 > #56       |
#57    [          fct,c          ] #57 > #57       |    $i++;}
#58    [                         ] #58 > #58       |
#59    [           fct           ] #59 > #80       |    public function phpArray() {
#60    [                         ] #60 > #60       |
#61    [         c,str,c         ] #61 > #61       |        $array = array("hello");
#62    [                         ] #62 > #62       |
#63    [            c            ] #63 > #66       |        $array = array
#64    [            c            ] #64 > #66       |        (
#65    [           str           ] #65 > #65       |            "hello"
#66    [            c            ] #66 > #66       |        );
#67    [                         ] #67 > #67       |
#68    [            c            ] #68 > #72       |        $array = array(
#69    [          str,c          ] #69 > #69       |            "hello",
#70    [          str,c          ] #70 > #70       |            "world",
#71    [          str,c          ] #71 > #72       |            "world!",
#72    [            c            ] #72 > #72       |        );
#73    [                         ] #73 > #73       |
#74    [            c            ] #74 > #78       |        $array = [
#75    [          str,c          ] #75 > #75       |            "hello",
#76    [          str,c          ] #76 > #76       |            "world",
#77    [          str,c          ] #77 > #78       |            "world!",
#78    [            c            ] #78 > #78       |        ];
#79    [                         ] #79 > #79       |
#80    [           fct           ] #80 > #80       |    }
#81    [                         ] #81 > #81       |
#82    [           fct           ] #82 > #90       |    public function multilineConditions() {
#83    [                         ] #83 > #83       |
#84    [            c            ] #84 > #88       |        return ($a && (
#85    [            c            ] #85 > #88       |            $b
#86    [            c            ] #86 > #88       |            ||
#87    [            c            ] #87 > #88       |            $c
#88    [            c            ] #88 > #88       |        ));
#89    [                         ] #89 > #89       |
#90    [           fct           ] #90 > #90       |    }
#91    [                         ] #91 > #91       |
#92    [           fct           ] #92 > #102      |    public function codeEndAfterSemicolonAndBraces() {
#93    [                         ] #93 > #93       |
#94    [         c,str,c         ] #94 > #95       |        if (!$options['file'])
#95    [            c            ] #95 > #95       |        {
#96    [                         ] #96 > #96       |
#97    [         c,str,c         ] #97 > #97       |            throw new RuntimeException("Missing file name");
#98    [                         ] #98 > #98       |
#99    [                         ] #99 > #99       |        }
#100   [                         ] #100 > #100     |
#101   [         c,str,c         ] #101 > #101     |        return file_put_contents($options['file'], static::export($options));
#102   [           fct           ] #102 > #102     |    }
#103   [                         ] #103 > #103     |
#104   [          class          ] #104 > #104     |}
#105   [                         ] #105 > #105     |
#106   [          class          ] #106 > #109     |class
#107   [          class          ] #107 > #109     |    Sample2
#108   [          class          ] #108 > #109     |    extends Sample2 {
#109   [          class          ] #109 > #109     |}
#110   [                         ] #110 > #110     |
#111   [        interface        ] #111 > #115     |interface Template1
#112   [        interface        ] #112 > #115     |{
#113   [        attr,fct         ] #113 > #113     |    public function setVariable($name, $var);
#114   [        attr,fct         ] #114 > #114     |    public function getHtml($template);
#115   [        interface        ] #115 > #115     |}
#116   [                         ] #116 > #116     |
#117   [          trait          ] #117 > #124     |trait Template2 {
#118   [           fct           ] #118 > #120     |    public function setVariable($name, $var) {
#119   [                         ] #119 > #119     |
#120   [           fct           ] #120 > #120     |    }
#121   [           fct           ] #121 > #123     |    public function getHtml($template) {
#122   [                         ] #122 > #122     |
#123   [           fct           ] #123 > #123     |    }
#124   [          trait          ] #124 > #124     |}
#125   [                         ] #125 > #125     |
#126   [          class          ] #126 > #127     |class Dir extends \FilterIterator{
#127   [          class          ] #127 > #127     |}
#128   [                         ] #128 > #128     |
#129   [           doc           ] #129 > #129     |//No scope
#130   [          c,c,c          ] #130 > #130     |for($i = 0; $i <= 10; $i++) {
#131   [            c            ] #131 > #131     |    $rand = rand();
#132   [                         ] #132 > #132     |}
#133   [                         ] #133 > #133     |
#134   [          close          ] #134 > #134     |?>
#135   [                         ] #135 > #135     |
#136   [            p            ] #136 > #136     |<i> Hello World </i>
#137   [                         ] #137 > #137     |
#138   [          open           ] #138 > #138     |<?php
#139   [           doc           ] #139 > #141     |/**
#140   [           doc           ] #140 > #141     | * Some comments2
#141   [           doc           ] #141 > #141     | */
#142   [           ns            ] #142 > #142     |
#143   [           ns            ] #143 > #152     |namespace kahlan\spec\fixture\parser;
#144   [                         ] #144 > #144     |
#145   [          class          ] #145 > #149     |class Sample3 extends Sample2 {
#146   [           fct           ] #146 > #148     |    public function myMethod() {
#147   [         c,str,c         ] #147 > #147     |        return 'Hello World';
#148   [           fct           ] #148 > #148     |    }
#149   [          class          ] #149 > #149     |}
#150   [                         ] #150 > #150     |
#151   [          close          ] #151 > #151     |?>
#152   [         ns,open         ] #152 > #152     |<?php
#153   [           ns            ] #153 > #158     |namespace kahlan\spec\fixture\whatever;
#154   [                         ] #154 > #154     |
#155   [          class          ] #155 > #158     |class NoPhpEndTag
#156   [          class          ] #156 > #158     |{
#157   [                         ] #157 > #157     |
#158   [        class,ns         ] #158 > #158     |}
